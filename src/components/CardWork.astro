---
import type { arrayOutputType } from 'astro:schema';

interface Props {
	title: string;
	company: string;
	description: string;
    technologies: any;
}

const { title, company, description, technologies } = Astro.props;

let colorsRandom: string[] = ['blue','green','teal','pink','indigo','yellow'];


---

<div class="relative group overflow-hidden p-8 mb-8 rounded-xl bg-white border border-gray-200 dark:border-gray-800 dark:bg-gray-900">
    <div aria-hidden="true" class="inset-0 absolute aspect-video border rounded-full -translate-y-1/2 group-hover:-translate-y-1/4 duration-300 bg-gradient-to-b from-green-500 to-white dark:from-white dark:to-white blur-2xl opacity-25 dark:opacity-5 dark:group-hover:opacity-10"></div>
    <div class="relative">

        {technologies.map((techology: string) => {
            // let color = "blue";
            let color = colorsRandom[Math.floor(Math.random() * colorsRandom.length)];
            
            let classStyle = "bg-gradient-to-tr from-"+color.toString()+"-600 to-blue-400 center relative inline-block select-none whitespace-nowrap rounded-lg py-2 px-3.5 mr-2 align-baseline font-sans text-xs font-bold uppercase leading-none text-white";

            return( <div class={classStyle}>
                    <div class="mt-px">{techology}</div></div>);
        })}
        
        <div class="mt-6 rounded-b-[--card-border-radius]">
            <p class="text-xl text-gray-700 dark:text-gray-300">{title}</p>
        </div>

        <div class="mt-2 pb-6 rounded-b-[--card-border-radius]">
            <p class="text-gray-700 dark:text-gray-300">{company}</p>
        </div>

        <div class="mt-3 pb-6 rounded-b-[--card-border-radius]">
            <p class="text-gray-700 dark:text-gray-300">{description}</p>
        </div>
    </div>
</div>

<style>
</style>